extern alias MountAndBlade;
using SandBox.GauntletUI.AutoGenerated1;
using System;
using System.Collections.Generic;
using System.Linq;
using MountAndBlade.System.Numerics;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using TaleWorlds.GauntletUI.BaseTypes;
using TaleWorlds.Library;
using TaleWorlds.CampaignSystem.Actions;

namespace InGameUIDesigner
{
    public class ColourPickerVM : ViewModel
    {
        [DataSourceProperty]
        public Color FinalColour
        {
            get => _finalColour;
            set
            {
                if (value != _finalColour)
                {
                    _finalColour = value;
                    OnPropertyChangedWithValue(value, "FinalColour");
                }
            }
        }
        [DataSourceProperty]
        public float Value
        {
            get => _value;
            set
            {
                if (value != _value)
                {
                    _value = value;
                    OnPropertyChangedWithValue(value, "Value");
                    UpdateColourHSVtoRGB();
                }
            }
        }
        [DataSourceProperty]
        public float HueSaturationPickerXOffset
        {
            get => _hueSaturationPickerXOffset;
            set
            {
                if (value != _hueSaturationPickerXOffset)
                {
                    _hueSaturationPickerXOffset = value;
                    OnPropertyChangedWithValue(value, "HueSaturationPickerXOffset");
                }
            }
        }
        [DataSourceProperty]
        public float HueSaturationPickerYOffset
        {
            get => _hueSaturationPickerYOffset;
            set
            {
                if (value != _hueSaturationPickerYOffset)
                {
                    _hueSaturationPickerYOffset = value;
                    OnPropertyChangedWithValue(value, "HueSaturationPickerYOffset");
                }
            }
        }
        
        public ColourPickerVM(UIEditorPopUpsVM owner)
        {
            _owner = owner;
            _hue = 0f;
            _saturation = 0f;
            _value = 1f;
            HueSaturationPickerXOffset = 0f;
            HueSaturationPickerYOffset = 0f;
        }

        public void SetColourPickerWidget(Widget hueSaturationPickerWidget)
        {
            _hueSaturationPicker = hueSaturationPickerWidget;
        }

        public void PickHueAndSaturation()
        {
            var localMousePos = -_hueSaturationPicker.GetLocalPoint(_hueSaturationPicker.EventManager.MousePosition);
            localMousePos += _hueSaturationPicker.Size / 2f;
            var maxVec = Vector2.Normalize(localMousePos) * _hueSaturationPicker.Size.X / 2f;
            if (localMousePos.LengthSquared() > maxVec.LengthSquared()) localMousePos = maxVec;
            HueSaturationPickerXOffset = -localMousePos.X * _hueSaturationPicker.Context.InverseScale;
            HueSaturationPickerYOffset = -localMousePos.Y * _hueSaturationPicker.Context.InverseScale;
            var angle = MathF.Atan2(localMousePos.Y, localMousePos.X);
            if (angle < 0) angle = angle + MathF.PI;
            if (localMousePos.Y < 0f) angle += MathF.PI;
            angle = MathF.RadToDeg * angle;
            _saturation = MathF.Clamp(2 * localMousePos.Length() / _hueSaturationPicker.Size.X, 0f, 1f);
            _hue = MathF.Clamp(angle, 0f, 360f);
            UpdateColourHSVtoRGB();
        }

        public void UpdateHSVFromColour()
        {
            var r = FinalColour.Red;
            var g = FinalColour.Green;
            var b = FinalColour.Blue;
            var m_max = MathF.Max(r, g, b);
            var m_min = MathF.Min(r, g, b);
            var delta = m_max - m_min;
            if (delta == 0) _hue = 0;
            else if (m_max == r) _hue = (g - b) / delta;
            else if (m_max == g) _hue = 2f + (b - r) / delta;
            else _hue = 4f + (r - g) / delta;
            _hue *= 60f;
            _hue = MathF.AngleClamp(_hue * MathF.DegToRad) * MathF.RadToDeg;
            var value = m_max;
            _saturation = value == 0 ? 0 : delta / value;

            var radius = _hueSaturationPicker.SuggestedWidth / 2f;
            HueSaturationPickerXOffset = -radius * _saturation * MathF.Cos(_hue * MathF.DegToRad);
            HueSaturationPickerYOffset = -radius * _saturation * MathF.Sin(_hue * MathF.DegToRad);
            Value = 1 - value;
        }
        private void UpdateColourHSVtoRGB()
        {
            // Value Slider is reversed. (Full / 1 is black, and Empty / 0 is white)
            var value = 1f - Value;
            // I don't understand any of that. I just lifted it off of Wikipedia. It's 2 A.M.
            var chroma = value * _saturation;
            var hueDash = _hue / 60f;
            var x = chroma * (1 - MathF.Abs(hueDash % 2 - 1));
            var r1 = 0f;
            var g1 = 0f;
            var b1 = 0f;
            switch (hueDash)
            {
                case < 1 :
                    r1 = chroma;
                    g1 = x;
                    break;
                case < 2:
                    r1 = x;
                    g1 = chroma;
                    break;
                case < 3:
                    g1 = chroma;
                    b1 = x;
                    break;
                case < 4:
                    g1 = x;
                    b1 = chroma;
                    break;
                case < 5:
                    r1 = x;
                    b1 = chroma;
                    break;
                case < 6:
                    r1 = chroma;
                    b1 = x;
                    break;
            }
            var m = value - chroma;
            var r = (r1 + m);
            var g = (g1 + m);
            var b = (b1 + m);
            FinalColour = Color.FromVector3(new Vec3(r, g, b));
        }
        public void PickColour()
        {
            _owner.OnColourPicked(FinalColour);
            _owner.ClosePopUps();
        }

        private Color _finalColour;
        private float _value;
        private float _hueSaturationPickerXOffset;
        private float _hueSaturationPickerYOffset;
        private float _hue;
        private float _saturation;
        private UIEditorPopUpsVM _owner;
        private Widget _hueSaturationPicker;
        private bool _dontUpdateColour;
    }
}
